#include<iostream>
#include<math.h>
using namespace std;
int findGCD(int a, int b) {
    if(a == 0) return b;
    if(b == 0) return a;

    if(a == b) return a;

    if(a > b) return findGCD(a % b, b);
    return findGCD(a, b % a);
}
void generatePublicPrivateKey(int &p, int &q, int &n, int &phiOfN, int &e, int &d) {
    int i;
    cout<<"Enter 2 large prime numbers: "<<endl;
    cin>>p>>q;
    n = p * q;
    phiOfN = (p - 1) * (q - 1);
    cout<<"Phi of N is : "<<phiOfN<<endl;
    for(i = 2; i <= sqrt(phiOfN); i++) {
        if(findGCD(i, phiOfN) == 1) break;
    }
    e = i;
    cout<<"Value of Public key is { "<<e<<" , "<<n<<" }"<<endl;
    d = 1;
    while ((e * d) % phiOfN != 1) {
        d++;
    }
    cout<<"Value of Private key is { "<<d<<" , "<<n<<" }"<<endl;
}
double encryptText(int val, int e, int n) {
    double c = pow(val, e);
    c = fmod(c, n);
    return c;
}
double decryptText(int cipherText, int d, int n) {
    double m = pow(cipherText, d);
    m = fmod(m, n);
    return m;
}
int main() {
    int p, q, n, phiOfN, e, d, val;
    generatePublicPrivateKey(p, q, n, phiOfN, e, d);
    cout<<"Enter the value to be Encrypted: "<<endl;
    cin>>val;
    double cipherText = encryptText(val, e, n);
    cout<<"Cipher Text: "<<cipherText<<endl;
    double plainText = decryptText(cipherText, d, n);
    cout<<"Plain Text: " <<plainText<<endl;
    return 0;
}
